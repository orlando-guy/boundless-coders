// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?        @unique @db.VarChar(255)
  email         String?        @unique @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  accounts      Account[]
  sessions      Session[]
  tags          Tag[]
  challenges    Challenge[]
  projects      Project[]
  contributions Contribution[]
  Solution      Solution[]
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id         String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String             @unique @db.VarChar(255)
  admin      User               @relation(fields: [adminId], references: [id])
  adminId    String             @db.Uuid
  archived   Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now())
  challenges TagsOnChallenges[]
  projects   TagsOnProjects[]
}

model Challenge {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String             @unique @db.VarChar(255)
  description        String
  content            String
  slug               String             @unique @db.VarChar(255)
  archived           Boolean            @default(false)
  published          Boolean            @default(true)
  level              Level              @default(ENTRY)
  challengeManager   User               @relation(fields: [challengeManagerId], references: [id])
  challengeManagerId String             @db.Uuid
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now())
  tags               TagsOnChallenges[]
  solutions          Solution[]
}

model TagsOnChallenges {
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String    @db.Uuid
  tag         Tag       @relation(fields: [tagId], references: [id])
  tagId       String    @db.Uuid
  assignedAt  DateTime  @default(now())

  @@id([challengeId, tagId])
}

model Solution {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  repoUrl     String    @unique @db.VarChar(255)
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Project {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String           @db.VarChar(255)
  issueUrl      String           @unique @db.VarChar(255)
  description   String
  solved        Boolean          @default(false)
  archived      Boolean          @default(false)
  publiched     Boolean          @default(false)
  resolvedBy    String?
  resolverImage String?
  solutionUrl   String?          @unique @db.VarChar(255)
  user          User             @relation(fields: [userId], references: [id])
  userId        String           @db.Uuid
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
  contributions Contribution[]
  tags          TagsOnProjects[]
}

model TagsOnProjects {
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String   @db.Uuid
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String   @db.Uuid
  assignedAt DateTime @default(now())

  @@id([projectId, tagId])
}

model Contribution {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project       Project  @relation(fields: [projectId], references: [id])
  projectId     String   @db.Uuid
  contributor   User     @relation(fields: [contributorId], references: [id])
  contributorId String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Newsletter {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @db.VarChar(255)
  loggedOut Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum Role {
  USER
  CHALLENGE_MANAGER
  ADMIN
}

enum Level {
  ENTRY
  MIDDLE
  ADVANCED
}
